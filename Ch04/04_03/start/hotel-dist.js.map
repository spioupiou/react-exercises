{"version":3,"sources":["hotel.js"],"names":["PostForm","props","typeOptions","Object","keys","messageTypes","map","key","hasOwnProperty","defaultType","StatusMessage","statusDate","date","parse","time","dateFormat","msg","type","format","StatusMessageList","stubStatuses","id","React","useState","statuses","setStatus","displayStatusMessages","status","StatusMessageManager","management","dining","ops","plumbing","pool","apiUrl","ReactDOM","render","document","getElementById"],"mappings":"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","sourcesContent":["function PostForm(props) {\n  var typeOptions = Object.keys(props.messageTypes).map(function(key) {\n    if (props.messageTypes.hasOwnProperty(key)) {\n      return (\n        <option key={key} value={key}>\n          {props.messageTypes[key]}\n        </option>\n      );\n    }\n  });\n\n  // so we don't have to type this over and over\n  var defaultType = typeOptions[0].key;\n\n  return (\n    <form>\n      <h3>Post an Update</h3>\n\n      <div className=\"field-group\">\n        <label htmlFor=\"txt-message\">Message</label>\n        <textarea id=\"txt-message\" rows=\"2\" />\n      </div>\n\n      <div className=\"field-group\">\n        <label htmlFor=\"txt-type\">Type</label>\n        <select id=\"txt-type\">{typeOptions}</select>\n      </div>\n\n      <div className=\"field-group action\">\n        <input type=\"submit\" value=\"Post Update\" />\n      </div>\n    </form>\n  );\n}\n\nfunction StatusMessage(props) {\n  var statusDate = date.parse(props.time, \"YYYY-MM-DD, HH:mm\"),\n    dateFormat = \"M/D/Y, h:mm A\";\n\n  return (\n    <div className=\"status-message\">\n      {props.msg}\n      <span className=\"name\">— {props.type}</span>\n      <span className=\"time\">{date.format(statusDate, dateFormat)}</span>\n    </div>\n  );\n}\n\nfunction StatusMessageList(props) {\n  var stubStatuses = [\n    {\n      id: 1,\n      msg:\n        \"The hot tub is currently closed for maintenance.  We expect it to be back up and running within 48 hours.\",\n      type: \"management\",\n      time: \"2019-04-11, 09:15\"\n    },\n    {\n      id: 2,\n      msg: \"The hot tub maintenance is complete.  Please enjoy a dip!\",\n      type: \"management\",\n      time: \"2019-04-14, 17:12\"\n    },\n    {\n      id: 3,\n      msg:\n        \"The rice cooker is on the fritz, any fried rice dishes will require some extra time to cook.\",\n      type: \"dining\",\n      time: \"2019-04-18, 15:00\"\n    }\n  ];\n\n  var [statuses, setStatuses] = React.useState(stubStatuses);\n\n  function displayStatusMessages() {\n    return statuses.map(function(status) {\n      return (\n        <li key={status.id}>\n          <StatusMessage\n            msg={status.msg}\n            type={props.messageTypes[status.type]}\n            time={status.time}\n          />\n        </li>\n      );\n    });\n  }\n\n  return <ul id=\"status-list\">{displayStatusMessages()}</ul>;\n}\n\nfunction StatusMessageManager(props) {\n  var messageTypes = {\n    management: \"Management\",\n    dining: \"Dining Services\",\n    ops: \"Operations\",\n    plumbing: \"Plumbing\",\n    pool: \"Pool\"\n  };\n\n  var apiUrl = \"http://localhost/reactjs/status_api\";\n\n  return (\n    <React.Fragment>\n      <div id=\"post-status\">\n        <PostForm messageTypes={messageTypes} />\n      </div>\n      <StatusMessageList messageTypes={messageTypes} />\n    </React.Fragment>\n  );\n}\n\nReactDOM.render(<StatusMessageManager />, document.getElementById(\"react-statusmanager\"));\n"]}
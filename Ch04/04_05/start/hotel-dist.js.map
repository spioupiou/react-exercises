{"version":3,"sources":["hotel.js"],"names":["CONFIG","apiUrl","PostForm","props","typeOptions","Object","keys","messageTypes","map","key","hasOwnProperty","defaultType","StatusMessage","statusDate","date","parse","time","dateFormat","msg","type","format","StatusMessageList","React","useState","statuses","setStatuses","loaded","setLoaded","useEffect","retrieveStatusMessages","axios","get","then","response","data","displayStatusMessages","status","id","StatusMessageManager","management","dining","ops","plumbing","pool","ReactDOM","render","document","getElementById"],"mappings":"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","sourcesContent":["(function() {\n  \"use strict\";\n\n  var CONFIG = {\n    apiUrl: \"http://localhost/reactjs/status_api\"\n  };\n\n  function PostForm(props) {\n    var typeOptions = Object.keys(props.messageTypes).map(function(key) {\n      if (props.messageTypes.hasOwnProperty(key)) {\n        return (\n          <option key={key} value={key}>\n            {props.messageTypes[key]}\n          </option>\n        );\n      }\n    });\n\n    // so we don't have to type this over and over\n    var defaultType = typeOptions[0].key;\n\n    return (\n      <form>\n        <h3>Post an Update</h3>\n\n        <div className=\"field-group\">\n          <label htmlFor=\"txt-message\">Message</label>\n          <textarea id=\"txt-message\" rows=\"2\" />\n        </div>\n\n        <div className=\"field-group\">\n          <label htmlFor=\"txt-type\">Type</label>\n          <select id=\"txt-type\">{typeOptions}</select>\n        </div>\n\n        <div className=\"field-group action\">\n          <input type=\"submit\" value=\"Post Update\" />\n        </div>\n      </form>\n    );\n  }\n\n  function StatusMessage(props) {\n    var statusDate = date.parse(props.time, \"YYYY-MM-DD, HH:mm\"),\n      dateFormat = \"M/D/Y, h:mm A\";\n\n    return (\n      <div className=\"status-message\">\n        {props.msg}\n        <span className=\"name\">— {props.type}</span>\n        <span className=\"time\">{date.format(statusDate, dateFormat)}</span>\n      </div>\n    );\n  }\n\n  function StatusMessageList(props) {\n    var [statuses, setStatuses] = React.useState([]);\n    var [loaded, setLoaded] = React.useState(false);\n\n    React.useEffect(function() {\n      retrieveStatusMessages();\n    }, []);\n\n    function retrieveStatusMessages() {\n      axios.get(CONFIG.apiUrl + \"/get.php?delay=5\").then(function(response) {\n        setStatuses(response.data);\n        setLoaded(true);\n      });\n    }\n\n    function displayStatusMessages() {\n      return statuses.map(function(status) {\n        return (\n          <li key={status.id}>\n            <StatusMessage\n              msg={status.msg}\n              type={props.messageTypes[status.type]}\n              time={status.time}\n            />\n          </li>\n        );\n      });\n    }\n\n    if (loaded) {\n      return <ul id=\"status-list\">{displayStatusMessages()}</ul>;\n    } else {\n      return (\n        <div id=\"status-list\" className=\"loading\">\n          Loading...\n          <div className=\"spinner\">\n            <div className=\"bounce1\" />\n            <div className=\"bounce2\" />\n            <div className=\"bounce3\" />\n          </div>\n        </div>\n      );\n    }\n  }\n\n  function StatusMessageManager(props) {\n    var messageTypes = {\n      management: \"Management\",\n      dining: \"Dining Services\",\n      ops: \"Operations\",\n      plumbing: \"Plumbing\",\n      pool: \"Pool\"\n    };\n\n    return (\n      <React.Fragment>\n        <div id=\"post-status\">\n          <PostForm messageTypes={messageTypes} />\n        </div>\n        <StatusMessageList messageTypes={messageTypes} />\n      </React.Fragment>\n    );\n  }\n\n  ReactDOM.render(\n    <StatusMessageManager />,\n    document.getElementById(\"react-statusmanager\")\n  );\n})();\n"]}
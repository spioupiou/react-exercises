(function() {
  "use strict";

  // Can use React.createElements with 3 arguments (type, properties and content)
  // But better to use JSX directly, with Babel

  const ProductImage = (props) => {
    return <img src={`../../../assets/${props.color}.jpg`} alt="Shoe" />;
  }

  const SizeSelector = (props) => {
    const sizeOptions = () => {
      return props.sizes.map(num => {
        return (
          // Everytime you generate a list of items that is generated by a helper function, you need a key
          <option value={num} key={num}>{num}</option>
        )
      });
    }

    // Event handler, when user changes the size in the selector
    const onSizeChange = (event) => {
      console.log(event.target.value)
      // Pass the prop to the parent component (child doesn't have access to states)
      props.handleSizeChange(event.target.value)
    }

    return (
      <div className="field-group">
        <label htmlFor="size-options">Size:</label>
        <select defaultValue={props.size} name="sizeOptions" id="size-options" onChange={onSizeChange}>
          {sizeOptions()}
        </select>
      </div>
    )
  }

  const ColorSelector = (props) => {
    const colorOptions = () => {
      return props.colors.map(name => {
        return (
          // Everytime you generate a list of items that is generated by a helper function, you need a key
          <option value={name} key={name}>{name}</option>
        )
      });
    }

    const onColorChange = (event) => {
      console.log(event.target.value)
      props.handleColorChange(event.target.value)
    }

    return (
      <div className="field-group">
        <label htmlFor="color-options">Color:</label>
        <select defaultValue={props.color} name="colorOptions" id="color-options" onChange={onColorChange}>
          {colorOptions()}
        </select>
      </div>
    )
  }

  // Element to be rendered, 3 arguments, what type of elt we are creating, props we are gonna passed into this elt, and whatever should be in this elt
  const ProductCustomizer = (props) => {
    // Array destructuring
    const [size, setSize] = React.useState(8);
    // useState is a Hook that adds React state to a function component
    // initialize useState with 8
    // function that returns an array of two elements: the current state and a function to update it
    const [sizes, setSizes] = React.useState(window.Inventory.allSizes);

    const [color, setColor] = React.useState("red");
    const [colors, setColors] = React.useState(window.Inventory.allColors);

    const handleSizeChange = (selectedSize) => {
      // Retrieve all colors from a given size from our API
      const availableColors = window.Inventory.bySize[selectedSize];
      // Modify the selector so that only available colors are selectable
      // Use setColors from hook
      setColors(availableColors);
      setSize(selectedSize);

      // If the color selected is not available for this size
      // indexOf() returns -1 if the elt is not in the array
      if (availableColors.indexOf(color) === -1) {
        // then set the color selector to the first available color
        setColor(availableColors[0]);
      }
    }

    const handleColorChange = (selectedColor) => {
      const availableSizes = window.Inventory.byColor[selectedColor]
      setSizes(availableSizes);
      setColor(selectedColor);

      if (availableSizes.indexOf(size) === -1) {
        setSize(availableSizes)[0]
      }
    }

    console.log(color)
    return (
      // Can't use class but className
      <div className="customizer">
        <div className="product-image">
          <ProductImage color={color} />
        </div>

        <div className="selectors">
          <SizeSelector size={size} sizes={sizes} handleSizeChange={handleSizeChange} />
          <ColorSelector color={color} colors={colors} handleColorChange={handleColorChange} />
        </div>
      </div>

      // handleSizeChange, handleColorChange, are functions that are passed as props to the children SizeSelector and ColorSelector
      // To call those functions from the child, need to call it on props (props.handleSizeChange)
    );
  }


  // ReactDOM.render takes two arguments: element to be rendered and where the element should go
  ReactDOM.render(<ProductCustomizer />, document.getElementById('react-root'));
})();

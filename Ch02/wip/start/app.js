(function() {
  "use strict";

  // Can use React.createElements with 3 arguments (type, properties and content)
  // But better to use JSX directly, with Babel

  const ProductImage = (props) => {
    return <img src={`../../../assets/${props.color}.jpg`} alt="Shoe" />;
  }

  const SizeSelector = (props) => {
    const sizeOptions = () => {
      const sizes = window.Inventory.allSizes;

      return sizes.map(num => {
        return (
          // Everytime you generate a list of items that is generated by a helper function, you need a key
          <option value={num} key={num}>{num}</option>
        )
      });
    }

    return (
      <div className="field-group">
        <label htmlFor="size-options">Size:</label>
        <select defaultValue={props.size} name="sizeOptions" id="size-options">
          {sizeOptions()}
        </select>
      </div>
    )
  }

  // Element to be rendered, 3 arguments, what type of elt we are creating, props we are gonna passed into this elt, and whatever should be in this elt
  const ProductCustomizer = (props) => {
    return (
      // Can't use class but className
      <div className="customizer">
        <div className="product-image">
          <ProductImage color="red" />
        </div>

        <div className="selectors">
          <SizeSelector size={8} />
        </div>

      </div>
    );
  }


  // ReactDOM.render takes two arguments: element to be rendered and where the element should go
  ReactDOM.render(<ProductCustomizer />, document.getElementById('react-root'));
})();
